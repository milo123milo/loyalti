<link rel="stylesheet" href="/stylesheets/header.css" />
<link rel="stylesheet" href="/stylesheets/users.css" />
    <link rel="stylesheet" href="/stylesheets/fonts.css" />

<link rel="stylesheet" href="/stylesheets/bootstrap.min.css" />
<script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <script src="https://code.jquery.com/jquery-3.6.4.min.js
"
        
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
        crossorigin="anonymous"></script>
    
    <link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />








<div class="header">
    <div class="h1">
        Clients
    </div>
    <div class="head-left">
        <% if(role==='root' ){ %>
        <button  style="margin-bottom: 4px;" id="logout-button" type="button" class=" bt btn btn-success" data-toggle="modal" data-target="#exampleModalCenter">+ Create new</button>
        <% } %>
        <button onclick="window.location='/'" style="margin-bottom: 4px;" id="logout-button" type="button" class="bt btn btn-primary">< Back</button>
    </div>
</div>
<% if (message) { %>
    <div class="popup h6">
        <%= message %>
    </div>
    <% } %>

<div id="wrapper" style="margin-inline: 100px; margin-bottom: 50px;"></div>


<!-- Modal -->


<div class="modal fade in" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenter"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Create new user</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form  id="userform" class="formm" action="/clients" method="POST">
                    <div class="filed">
                        <label for="username" class="form-label">Name:</label>
                        <input type="text" id="name" name="name" class="form-control" required>
                    </div>
                    <div class="filed">
                        <label for="password" class="form-label">Discount [%]:</label>
                        <input type="text" id="discount" name="discount" class="form-control" required>
                    </div>
                    <div class="filed">
                        <label for="role" class="form-label">Type:</label>
                        <select id="type" name="type" class="form-control" required>
                            <% types.forEach(function(type) { %>
                                <option value="<%= type %>">
                                    <%= type %>
                                </option>
                                <% }); %>
                        </select>
                    </div>
                    <div class="filed">
                        <label for="role" class="form-label">PIB:</label>
                        <input type="text" id="pib" name="pib" class="form-control" required>
                    </div>
                    <div class="filed">
                        <label for="role" class="form-label">Address:</label>
                        <input type="text" id="address" name="address" class="form-control" required>
                    </div>
                    <div class="filed">
                        <label for="role" class="form-label">Category:</label>
                        <select id="edit-category" name="category" class="form-control" required>
                            <% category.forEach(function(category) { %>
                                <option value="<%= category.name %>">
                                    <%= category.name %>
                                </option>
                                <% }); %>
                        </select>
                    </div>
                    <div class="row">
                        <div class="col-lg-3 col-sm-6" style="min-width: 220px;">
                            <label for="startDate">Start</label>
                            <input id="startDate" name="start" class="form-control" type="date"/>
                            <!-- <span id="startDateSelected"></span> -->
                        </div>
                        <div class="col-lg-3 col-sm-6" style="min-width: 220px;">
                            <label for="endDate">End</label>
                            <input id="endDate" name="end" class="form-control" type="date" />
                            <!--  <span id="endDateSelected"></span>-->
                        </div>
                    
                    </div>
                    <div class="field">
                        <div id="infocont" style="padding-top: 10px;" class="filed"></div>
                        <div class="" style="min-width: 220px; padding-top: 15px">
                            <button id="addinfo" type="button" class="btn btn-success">+ Additional Info</button>
                        </div>
                           
                    </div>
                
                    
                
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="deleteAllElements()" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit"  onclick="submitFormAndExpandInfo();" type="button" class="btn btn-primary">Create</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade in" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModal"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Edit client</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                
                <form  id="edit-userform" class="formm" action="/editclient" method="POST">
                    <div class="filed">
                        <label for="id" class="form-label">ID:</label>
                        <input type="text" id="edit-id" name="id" class="form-control" readonly>
                    </div>
                    <div class="filed">
                        <label for="username" class="form-label">Name:</label>
                        <input type="text" id="edit-name" name="name" class="form-control" required>
                    </div>
                    <div class="filed">
                        <label for="password" class="form-label">Discount [%]:</label>
                        <input type="text" id="edit-discount" name="discount" class="form-control" required>
                    </div>
                    <div class="filed">
                        <label for="role" class="form-label">Type:</label>
                        <select id="edit-type" name="type" class="form-control" required>
                            <% types.forEach(function(type) { %>
                                <option value="<%= type %>">
                                    <%= type %>
                                </option>
                                <% }); %>
                        </select>
                    </div>
                    <div class="filed">
                        <label for="role" class="form-label">PIB:</label>
                        <input type="text" id="edit-pib" name="pib" class="form-control" required>
                    </div>
                    <div class="filed">
                        <label for="role" class="form-label">Address:</label>
                        <input type="text" id="edit-address" name="address" class="form-control" required>
                    </div>
                    <div class="filed">
                        <label for="role" class="form-label">Category:</label>
                        <select id="edit-category-tab" name="category" class="form-control" required>
                            <% category.forEach(function(category) { %>
                                <option value="<%= category.name %>">
                                    <%= category.name %>
                                </option>
                                <% }); %>
                        </select>
                    </div>
                    <div class="row">                    
                        <div class="col-lg-3 col-sm-6" style="min-width: 220px;">
                        <label for="endDate">End</label>
                        <input id="edit-endDate" name="end" class="form-control" type="date" />
                        <!--  <span id="endDateSelected"></span>-->
                    </div>
                    </div>



                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" onclick="document.getElementById('edit-userform').submit();" type="button"
                    class="btn btn-primary">Confirm</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade in" id="infoModal" tabindex="-1" role="dialog" aria-labelledby="infoModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Additional info</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id='infodata' class="field"></div>
                <div class="field">
                    <div id="edit-infocont" style="padding-top: 10px;" class="filed"></div>
                    <div class="" style="min-width: 220px; padding-top: 15px; padding-bottom: 15px;">
                        <button id="edit-addinfo" type="button" class="btn btn-success">+ Additional Info</button>
                    </div>
                
                </div>
             
            </div>
            <div class="modal-footer">
                <button type="button" onclick="" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" onclick="saveEditInfo()" type="button"
                    class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>
<style>
    .margbtn {
        margin-left: 10px;
    }
</style>


<script>
    var catgs = <%- JSON.stringify(category) %>;
    var selectElement = document.getElementById('edit-category');
        function handleSelectChange() {
            var selectedOption = selectElement.options[selectElement.selectedIndex];
            var selectedValue = selectedOption.value;

            // Find the array position of the selected value
            var options = Array.from(selectElement.options);
            var selectedIndex = options.findIndex(function (option) {
                return option.value === selectedValue;
            });

            //get Start date + duration
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');

            // Get today's date
            const today = new Date().toISOString().split('T')[0];
            const td = new Date()

            startDateInput.setAttribute('min', today);
            startDateInput.value = (today)

            const startDate = new Date(startDateInput.value);

            // Calculate the minimum end date //get position duration
            const minEndDate = new Date(startDate.getFullYear(), startDate.getMonth() + getCatgSelc().duration, startDate.getDate());
            console.log(minEndDate)
            // Format the minimum end date as yyyy-MM-dd
            const minEndDateFormatted = minEndDate.toISOString().split('T')[0];

            // Set the minimum attribute for the end date input
            endDateInput.setAttribute('min', minEndDateFormatted);
            endDateInput.value = minEndDateFormatted
            
            const discountInput = document.getElementById('discount');
            discountInput.value = getCatgSelc().startdisc
            console.log("Array position of the selected element:", selectedIndex);
            console.log(catgs[selectedIndex].duration !== undefined ? catgs[selectedIndex].duration : 0)
        }
        function  getCatgSelc() {
            var selectedOption = selectElement.options[selectElement.selectedIndex];
            var selectedValue = selectedOption.value;

            // Find the array position of the selected value
            var options = Array.from(selectElement.options);
            var selectedIndex = options.findIndex(function (option) {
                return option.value === selectedValue;
            });
            var duration = catgs[selectedIndex].duration !== undefined ? catgs[selectedIndex].duration : 0
            var startdisc = catgs[selectedIndex].startdisc !== undefined ? catgs[selectedIndex].startdisc : 0
            return { duration ,  startdisc }
        }
        selectElement.addEventListener('change', handleSelectChange);

            var selectElement2 = document.getElementById('edit-category-tab');
                function handleSelectChange2() {
                    var selectedOption = selectElement2.options[selectElement.selectedIndex];
                    var selectedValue = selectedOption.value;

                    // Find the array position of the selected value
                    var options = Array.from(selectElement2.options);
                    var selectedIndex = options.findIndex(function (option) {
                        return option.value === selectedValue;
                    });

                    //get Start date + duration
                    
                    const endDateInput = document.getElementById('edit-endDate');

                    // Get today's date
                    const today = new Date().toISOString().split('T')[0];
                    const td = new Date()

                    

                    const startDate = new Date(startDateInput.value);

                    // Calculate the minimum end date //get position duration
                    const minEndDate = new Date(startDate.getFullYear(), startDate.getMonth() + getCatgSelc2().duration, startDate.getDate());
                    console.log(minEndDate)
                    // Format the minimum end date as yyyy-MM-dd
                    const minEndDateFormatted = minEndDate.toISOString().split('T')[0];

                    // Set the minimum attribute for the end date input
                    endDateInput.setAttribute('min', minEndDateFormatted);
                    endDateInput.value = minEndDateFormatted

                    const discountInput = document.getElementById('edit-discount');
                    discountInput.value = getCatgSelc2().startdisc

                    console.log("Array position of the selected element:", selectedIndex);
                    console.log(catgs[selectedIndex].duration !== undefined ? catgs[selectedIndex].duration : 0)
                }
                function getCatgSelc2() {
                    var selectedOption = selectElement2.options[selectElement2.selectedIndex];
                    var selectedValue = selectedOption.value;

                    // Find the array position of the selected value
                    var options = Array.from(selectElement2.options);
                    var selectedIndex = options.findIndex(function (option) {
                        return option.value === selectedValue;
                    });
                    var duration = catgs[selectedIndex].duration !== undefined ? catgs[selectedIndex].duration : 0
                    var startdisc = catgs[selectedIndex].startdisc !== undefined ? catgs[selectedIndex].startdisc : 0
                    return { duration, startdisc }


                    
                }
                selectElement2.addEventListener('change', handleSelectChange2);

    $(document).ready(function () {
        // Find the modal element using its ID
        var modal = $('#infoModal');
        var modal2 =  $('#exampleModalCenter'); 

        // Add an event listener for the modal's hidden.bs.modal event
        modal2.on('hidden.bs.modal', function () {
            // Handle the closing event here
            deleteAllElements()
            // Additional actions or code to execute when the modal is closed
        });
        
        modal.on('hidden.bs.modal', function () {
            // Handle the closing event here
            deleteAllElementsEdit()
            // Additional actions or code to execute when the modal is closed
        });
    });
  var dat = <%- JSON.stringify(data) %> ;
  var datAr = dat.map(obj => Object.values(obj))
 // datAr = datAr.filter(item => item[1] !== 'root');

  const myGrid = new  gridjs.Grid({
            
          columns: [
              { id: 'id', name: 'ID' },
              { id: 'name', name: 'Name' },
              { id: 'discount', name: 'Discount' },
              { id: 'type', name: 'Type' },
              { id: 'pib', name: 'PIB', hidden: true },
              { id: 'address', name: 'Address', hidden: true },
              { id: 'info', name: 'Info', hidden: true },
              { id: 'dcat', name: 'CategoryID', hidden: true },
              { id: 'start', name: 'Start', hidden: true },
              { id: 'end', name: 'End', formatter: (cell) => cell ? new Date(cell).toISOString().split('T')[0] : '' },
              { id: 'category_name', name: 'Category' },
              {
                  id: 'actions',
                  name: 'Actions',
                  formatter: (_, row) => {
                    <% if (role === 'root') { %>
            
                      const button = gridjs.h('button', {
                        class: 'btn btn-danger'  ,
                        style: 'margin-right: 10px;',
                        onClick: () => deleteItem(row.cells[0].data)
                      }, 'Delete');
                      const buttonEdit = gridjs.h('button', {
                          class: 'btn btn-success',
                          style: 'margin-right: 10px;',
                          'data-toggle': "modal" , 
                          'data-target': "#editModal",
                          onClick: () => editItem(row.cells)
                      }, 'Edit');
                      <% } %>
                      const buttonReport = gridjs.h('button', {
                          class: 'btn btn-info',
                          style: 'margin-right: 10px;',
                          onClick: () => window.location.href = `singleclient/${row.cells[0].data}`
                      }, 'Receipts');
                      const buttonStats = gridjs.h('button', {
                          class: 'btn btn-warning',
                          style: 'margin-right: 10px;',
                          onClick: () => window.location.href = `single-stats/${row.cells[0].data}`
                      }, 'Statistics');
                      const buttonInfo = gridjs.h('button', {
                          class: 'btn btn-secondary',
                          'data-toggle': "modal",
                          'data-target': "#infoModal",
                          onClick: () => editInfo(row.cells)
                      }, 'Info');
                      return gridjs.h('td', {},
                      <% if (role === 'root') { %>
                      button, buttonEdit, 
                      <% } %>
                      buttonReport, buttonStats, buttonInfo);
                  },
              },
          ],
          pagination: {
          limit: 20
            },
            data: datAr,
             sort: true,
            search: true,
  
        })
       
    myGrid.render(document.getElementById("wrapper"));
     function deleteItem(id) {
            $.ajax({
                url: `/deleteclient/${id}`,
                method: 'POST',
                success: function (response) {
                    console.log(response);
                    location.reload()
                },
                error: function (error) {
                    console.error(error);
                    // handle error response
                }
            });
        }
            
    const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');

        // Get today's date
        const today = new Date().toISOString().split('T')[0];
        const td = new Date()
        
        startDateInput.setAttribute('min', today);
        startDateInput.value = (today)

        const startDate = new Date(startDateInput.value);

            // Calculate the minimum end date //get position duration
            const minEndDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, startDate.getDate());
            console.log(minEndDate)
            // Format the minimum end date as yyyy-MM-dd
            const minEndDateFormatted = minEndDate.toISOString().split('T')[0];

            // Set the minimum attribute for the end date input
            endDateInput.setAttribute('min', minEndDateFormatted);
        endDateInput.value = minEndDateFormatted
        

        // Event listener for start date change
        startDateInput.addEventListener('change', function () {
            // Get the selected start date
            const startDate = new Date(startDateInput.value);
            
            // Calculate the minimum end date
            const minEndDate = new Date(startDate.getFullYear(), startDate.getMonth() + getCatgSelc().duration, startDate.getDate());
          
            const minEndDateFormatted = minEndDate.toISOString().split('T')[0];

            // Set the minimum attribute for the end date input
            endDateInput.setAttribute('min', minEndDateFormatted);
            endDateInput.value = minEndDateFormatted
            
        });
    function editItem(data){
        document.getElementById("edit-id").value = data[0].data
        document.getElementById("edit-name").value = data[1].data
        document.getElementById("edit-discount").value = data[2].data
        document.getElementById("edit-type").value = data[3].data
        document.getElementById("edit-pib").value = data[4].data
        document.getElementById("edit-address").value = data[5].data
        console.log(data[10].data)
        document.getElementById("edit-category-tab").value = data[10].data ? data[10].data : 'None';
        document.getElementById("edit-endDate").value = new Date(data[9].data).toISOString().split('T')[0];
        
        
    }
    var globalID = 0
    function editInfo(data) {
        const id = data[0].data
        globalID = id
        fetch('/singleclientinfo/' + id)
            .then(response => response.json())
            .then(data => {
                // Process the received data
                console.log(data);
                const dataString = data.info;

                // Split the data string into individual pairs
                const pairs = dataString.split(', ');

                // Create a document fragment to hold the generated HTML
                const fragment = document.createDocumentFragment();

                // Loop through each pair and generate HTML
                pairs.forEach(pair => {
                    const [name1, name2] = pair.split(':');

                    // Create a div element for each pair
                    const div = document.createElement('div');
                    div.classList.add('edit-infofields');
                    // Create input fields for name1 and name2
                    const input1 = document.createElement('input');
                    input1.type = 'text';
                    input1.value = (name1 !== null && name1 !== undefined) ? name1 : '';;
                    input1.classList.add('form-control', 'frVal')

                    const input2 = document.createElement('input');
                    input2.type = 'text';
                    input2.value = (name2 !== null && name2 !== undefined) ? name2 : '';;
                    input2.classList.add('form-control', 'frVal')

                    const button = document.createElement('Button');
                    button.classList.add('btn', 'btn-trash')
                    button.textContent = '✖'
                    button.onclick
                    button.addEventListener('click', function () {
                        const parentDiv = button.parentNode;
                        parentDiv.remove();
                        console.log("BUTTOn")
                    });
                    
                    // Append the input fields to the div
                    div.appendChild(input1);
                    div.appendChild(input2);
                    div.appendChild(button)

                    // Append the div to the document fragment
                    fragment.appendChild(div);
                });

                // Find the container div with the id "infodata"
                const container = document.getElementById('infodata');

                // Append the generated HTML to the container div
                container.appendChild(fragment);
            })
            .catch(error => {
                // Handle any errors
                console.error('Error:', error);
            });

    }
    function checkInput() {
            var userInput = document.getElementById("username").value;
            var myForm = document.getElementById("userform");
        myForm.addEventListener("submit", function () {
            return checkInput();
        })
            if (userInput.toLowerCase() === "root") {
                alert("Please choose a different username.");
                return false;
            }

            return true;
            
        }
            const generateButton = document.getElementById('addinfo');
            const container = document.getElementById('infocont');

            // Add event listener to the button
            generateButton.addEventListener('click', generateDiv);

            // Function to generate the div
            function generateDiv() {
                const newDiv = document.createElement('div');
                newDiv.classList.add('infofields');
                // Create the first input field
                const input1 = document.createElement('input');
                input1.type = 'text';
                input1.placeholder = 'Name';
                input1.classList.add('form-control', 'frVal')
                

                // Create the second input field
                const input2 = document.createElement('input');
                input2.type = 'text';
                input2.placeholder = 'Value';
                input2.classList.add('form-control')
                const button = document.createElement('Button');
                button.classList.add('btn', 'btn-trash', 'margbtn')
                button.textContent = '✖'
                button.onclick
                button.addEventListener('click', function () {
                    const parentDiv = button.parentNode;
                    parentDiv.remove();
                    console.log("BUTTOn")
                });
                
                // Append the input fields to the new div
                newDiv.appendChild(input1);
                newDiv.appendChild(input2);
                newDiv.appendChild(button)
                // Append the new div to the container
                container.appendChild(newDiv);
            }
        
        function submitFormAndExpandInfo() {
                // Submit the form
               

                // Get the info string
                const infoString = getInfo();

                // Expand the form info
                const obj = expandFormInfo(infoString);
                console.log(obj)
                fetch('/clients', {
                method: 'POST',
                body: JSON.stringify(obj),
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    location.reload()
                    // Handle the server response
                });
            }

            function getInfo() {
                const infocont = document.getElementById("infocont"); // Get the parent container

                const infofields = infocont.getElementsByClassName("infofields"); // Get the dynamically generated elements

                // Initialize an empty array to store the field values
                const fieldValues = [];

                // Loop through each dynamically generated element
                for (let i = 0; i < infofields.length; i++) {
                    const inputs = infofields[i].getElementsByTagName("input"); // Get the input fields within the current element

                    const values = [];
                    // Loop through each input field
                    for (let j = 0; j < inputs.length; j++) {
                        const value = inputs[j].value.trim(); // Get the value of the input field

                        // Push the value to the values array if it is not empty
                        if (value !== '') {
                            values.push(value);
                        }
                    }

                    if (values.length === 2) {
                        const pair = values.join(':'); // Join the values with ':'
                        fieldValues.push(pair); // Push the pair to the fieldValues array
                    }
                }

                // Join the field values with the desired format
                const string = fieldValues.join(', ');
                console.log(string);
                return string;
            }

            function expandFormInfo(infoString) {
                // Create a new div element
                const form = document.querySelector('#userform');
                const formData = new FormData(form);
                const formObject = {};
                for (let [key, value] of formData.entries()) {
                    formObject[key] = value;
                }
                formObject.extraInfo = infoString;

                return formObject

            }
    
                       const editGen = document.getElementById('edit-addinfo');
                        const editcont = document.getElementById('edit-infocont');

                        // Add event listener to the button
                        editGen.addEventListener('click', generateDivEdit);

                        // Function to generate the div
                        function generateDivEdit() {
                            const newDiv = document.createElement('div');
                            newDiv.classList.add('edit-infofields');
                            // Create the first input field
                            const input1 = document.createElement('input');
                            input1.type = 'text';
                            input1.placeholder = 'Name';
                            input1.classList.add('form-control', 'frVal')


                            // Create the second input field
                            const input2 = document.createElement('input');
                            input2.type = 'text';
                            input2.placeholder = 'Value';
                            input2.classList.add('form-control', 'frVal')

                            const button = document.createElement('Button');
                            button.classList.add('btn', 'btn-trash')
                            button.textContent = '✖'
                            button.onclick
                            button.addEventListener('click', function () {
                                const parentDiv = button.parentNode;
                                parentDiv.remove();
                                console.log("BUTTOn")
                            });
                            // Append the input fields to the new div
                            newDiv.appendChild(input1);
                            newDiv.appendChild(input2);
                            newDiv.appendChild(button);

                            // Append the new div to the container
                            editcont.appendChild(newDiv);
                        }

                        
                        function deleteAllElementsEdit() {
                                const editcont = document.getElementById('edit-infocont');
                              
                                const datacont = document.getElementById('infodata');

                                while (editcont.firstChild) {
                                    editcont.firstChild.remove();
                                }
                                while (datacont.firstChild) {
                                datacont.firstChild.remove();
                            }
                            }
                            function deleteAllElements() {
                                    const container = document.getElementById('infocont');

                                    while (container.firstChild) {
                                        container.firstChild.remove();
                                    }
                                }

        function saveEditInfo() {
              const divs = document.querySelectorAll('.edit-infofields');
            const values = [];

            divs.forEach(div => {
                const inputs = div.querySelectorAll('input');
                if (inputs.length === 2) {
                    const value1 = inputs[0].value;
                    const value2 = inputs[1].value;
                    values.push(`${value1}:${value2}`);
                }
            });

            const result = values.join(', ');
            $('#infoModal').modal('hide');
            postInfoEdit(result)
            console.log(result)
            //return result;
        }        
        function postInfoEdit(datainfo) {
            console.log('here')
            const data = { id: globalID, info: datainfo}
            fetch('/editclientinfo', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Error: ' + response.status);
                    }
                })
                .then(responseData => {
                    // Handle the response data
                    console.log(responseData);
                })
                .catch(error => {
                    // Handle any errors
                    console.error('Error:', error);
                });
        }       

 
                const currentPageURL = window.location.href;

                // Check if the URL matches the expected format
                if (currentPageURL.includes('/clients?search=')) {
                    // Extract the value of the search parameter
                    const urlParams = new URLSearchParams(window.location.search);
                    const searchValue = urlParams.get('search');
                    const decodedSearchValue = decodeURIComponent(searchValue);
                    console.log(decodedSearchValue);
                    
                    console.log(searchValue)
                    const inputElement = document.querySelector('.gridjs-input.gridjs-search-input');
                    // Create a new input event
                    const inputEvent = new Event('input');
                    // Simulate input by assigning the desired value
                    inputElement.value = searchValue;
                    // Dispatch the input event
                    inputElement.dispatchEvent(inputEvent);
                   
                   
                } 
                var inputElement = document.getElementById('edit-discount');

                    // Function to handle the value change event
                    function handleInputChange() {
                        const endDateInput = document.getElementById('edit-endDate');

                        // Get today's date
                        const today = new Date().toISOString().split('T')[0];
                        const td = new Date()



                        const startDate = new Date(startDateInput.value);

                        // Calculate the minimum end date //get position duration
                        const minEndDate = new Date(startDate.getFullYear(), startDate.getMonth() + getCatgSelc2().duration, startDate.getDate());
                        console.log(minEndDate)
                        // Format the minimum end date as yyyy-MM-dd
                        const minEndDateFormatted = minEndDate.toISOString().split('T')[0];

                        // Set the minimum attribute for the end date input
                        endDateInput.setAttribute('min', minEndDateFormatted);
                        endDateInput.value = minEndDateFormatted
                    }

                    // Add event listener for the input event
                inputElement.addEventListener('input', handleInputChange);

                

</script>